//This function will take an initial board state and tell you if its not solvable based on 
// the rules of sudoku, 1-9 only once in rows, columns and 3x3 squares
function sudokuVerifier(grid) { 
    let columns = [];
    let squares = [];
    
    //Grabbing columns
    for(let i = 0; i < 9; i++){
        let tempColumn = [];
        for(let j = 0; j < 9; j++){
            tempColumn.push(grid[j][i]);
        }
        columns.push(tempColumn);
    }
    //grabbing squares, the first two for loops control the current square
    //for instance, i = 0 and j = 0 they are grabbing the top left square
    //they are just multipliers for the position
    for( let i = 0; i < 3; i++){
        for( let j = 0; j < 3; j++){
            let tempSquare = [];
            for(let k = 0; k < 3; k++){
                for(let l = 0; l < 3; l++){
                    let x = k + (i * 3);
                    let y = l + (j * 3);
                    tempSquare.push(grid[x][y]);
                }
            }
            squares.push(tempSquare);
        }
    }
    // numbers in the arrays are still strings, plus the placeholder is a period
    let validChars = '123456789.'.split('');
    return [columns, squares, grid].every( rows => { // All the grids, horizontal, vertical, squares
        return rows.every( row => { // rows in each grid
            let prevArr = [];
            if(row.length !== 9){
                return false;
            }
            return row.every( char => {
                //checks if its a valid character and it hasn't been called before
                if(!prevArr.includes(char) && validChars.includes(char)){
                    //dont want to add the place holder otherwise most puzzles would fail!
                    if(char !== '.'){
                        prevArr.push(char)
                    }
                    return true;
                } else {
                    return false;
                }
            });
        })
    })
}

let grid1 = [
    [".",".",".","1","4",".",".","2","."], 
    [".",".","6",".",".",".",".",".","."], 
    [".",".",".",".",".",".",".",".","."], 
    [".",".","1",".",".",".",".",".","."], 
    [".","6","7",".",".",".",".",".","9"], 
    [".",".",".",".",".",".","8","1","."], 
    [".","3",".",".",".",".",".",".","6"], 
    [".",".",".",".",".","7",".",".","."], 
    [".",".",".","5",".",".",".","7","."]
]
console.log(sudokuVerifier(grid1)) // => true

let grid2 = [
    [".",".","4",".",".",".","6","3","."], 
    [".",".",".",".",".",".",".",".","."], 
    ["5",".",".",".",".",".",".","9","."], 
    [".",".",".","5","6",".",".",".","."], 
    ["4",".","3",".",".",".",".",".","1"], 
    [".",".",".","7",".",".",".",".","."], 
    [".",".",".","5",".",".",".",".","."], 
    [".",".",".",".",".",".",".",".","."], 
    [".",".",".",".",".",".",".",".","."]
]
console.log(sudokuVerifier(grid2)) // => false

let grid3 = [
    [".",".",".",".",".",".",".",".","2"], 
    [".",".",".",".",".",".","6",".","."], 
    [".",".","1","4",".",".","8",".","."], 
    [".",".",".",".",".",".",".",".","."], 
    [".",".",".",".",".",".",".",".","."], 
    [".",".",".",".","3",".",".",".","."], 
    ["5",".","8","6",".",".",".",".","."], 
    [".","9",".",".",".",".","4",".","."], 
    [".",".",".",".","5",".",".",".","."]
]
console.log(sudokuVerifier(grid3)) // => true

let grid4= [
    [".","9",".",".","4",".",".",".","."], 
    ["1",".",".",".",".",".","6",".","."], 
    [".",".","3",".",".",".",".",".","."], 
    [".",".",".",".",".",".",".",".","."], 
    [".",".",".","7",".",".",".",".","."], 
    ["3",".",".",".","5",".",".",".","."], 
    [".",".","7",".",".","4",".",".","."], 
    [".",".",".",".",".",".",".",".","."], 
    [".",".",".",".","7",".",".",".","."]
]
console.log(sudokuVerifier(grid4)) // => true

let grid5 = [
    ["7",".",".",".","4",".",".",".","."], 
    [".",".",".","8","6","5",".",".","."], 
    [".","1",".","2",".",".",".",".","."], 
    [".",".",".",".",".","9",".",".","."], 
    [".",".",".",".","5",".","5",".","."], 
    [".",".",".",".",".",".",".",".","."], 
    [".",".",".",".",".",".","2",".","."], 
    [".",".",".",".",".",".",".",".","."], 
    [".",".",".",".",".",".",".",".","."]
]
console.log(sudokuVerifier(grid5)) // => false

let grid6 = [
    [".","4",".",".",".",".",".",".","."], 
    [".",".","4",".",".",".",".",".","."], 
    [".",".",".","1",".",".","7",".","."], 
    [".",".",".",".",".",".",".",".","."], 
    [".",".",".","3",".",".",".","6","."], 
    [".",".",".",".",".","6",".","9","."], 
    [".",".",".",".","1",".",".",".","."], 
    [".",".",".",".",".",".","2",".","."], 
    [".",".",".","8",".",".",".",".","."]
]
console.log(sudokuVerifier(grid6)) // => false


let grid7 = [
    [".",".","5",".",".",".",".",".","."], 
    [".",".",".","8",".",".",".","3","."], 
    [".","5",".",".","2",".",".",".","."], 
    [".",".",".",".",".",".",".",".","."], 
    [".",".",".",".",".",".",".",".","9"], 
    [".",".",".",".",".",".","4",".","."], 
    [".",".",".",".",".",".",".",".","7"], 
    [".","1",".",".",".",".",".",".","."], 
    ["2","4",".",".",".",".","9",".","."]
]
console.log(sudokuVerifier(grid7)) // => false

let grid8 = [
    [".",".",".",".","2",".",".","9","."], 
    [".",".",".",".","6",".",".",".","."], 
    ["7","1",".",".","7","5",".",".","."], 
    [".","7",".",".",".",".",".",".","."], 
    [".",".",".",".","8","3",".",".","."], 
    [".",".","8",".",".","7",".","6","."], 
    [".",".",".",".",".","2",".",".","."], 
    [".","1",".","2",".",".",".",".","."], 
    [".","2",".",".","3",".",".",".","."]
]
console.log(sudokuVerifier(grid8)) // => false